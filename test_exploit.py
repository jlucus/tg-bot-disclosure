#!/usr/bin/env python3
"""
Test script to check if the exploit_automation.py script has any issues.
"""

import os
import json
import logging
import requests
from dotenv import load_dotenv
from colorama import Fore, Style, init

# Initialize colorama
init(autoreset=True)

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

def test_environment_variables():
    """Test if all required environment variables are set."""
    print(f"{Fore.BLUE}Testing environment variables...")
    
    required_vars = [
        "USER_A_BOT_TOKEN",
        "USER_A_TELEGRAM_USERNAME",
        "USER_B_TELEGRAM_USERNAME"
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
            print(f"{Fore.RED}Missing environment variable: {var}")
        else:
            print(f"{Fore.GREEN}Environment variable {var} is set: {value[:3]}...{value[-3:] if len(value) > 6 else value}")
    
    if missing_vars:
        print(f"{Fore.RED}Missing required environment variables: {', '.join(missing_vars)}")
        return False
    else:
        print(f"{Fore.GREEN}All required environment variables are set.")
        return True

def test_api_connection():
    """Test connection to the Telegram Bot API."""
    print(f"{Fore.BLUE}Testing API connection...")
    
    token = os.getenv("USER_A_BOT_TOKEN")
    url = f"https://api.telegram.org/bot{token}/getMe"
    
    try:
        response = requests.get(url)
        print(f"{Fore.GREEN}API Response Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print(f"{Fore.GREEN}API Connection successful!")
            print(f"{Fore.GREEN}Response: {json.dumps(response.json(), indent=2)}")
            return True
        else:
            print(f"{Fore.RED}API Connection failed with status code {response.status_code}")
            print(f"{Fore.RED}Response: {response.text}")
            return False
    except Exception as e:
        print(f"{Fore.RED}API Connection failed with error: {str(e)}")
        return False

def main():
    """Main function to run the tests."""
    print(f"{Fore.CYAN}Telegram Bot API Vulnerability Exploit Test")
    print(f"{Fore.CYAN}========================================\n")
    
    # Test environment variables
    env_vars_ok = test_environment_variables()
    
    if not env_vars_ok:
        print(f"{Fore.YELLOW}Please set all required environment variables in the .env file.")
        return
    
    # Test API connection
    api_ok = test_api_connection()
    
    if not api_ok:
        print(f"{Fore.YELLOW}API connection failed. Please check your bot token and internet connection.")
        return
    
    print(f"\n{Fore.GREEN}All tests passed! The environment is ready for exploitation.")
    print(f"{Fore.YELLOW}To run the full exploitation, use: python exploit_automation.py")

if __name__ == "__main__":
    main()
